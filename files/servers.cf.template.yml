AWSTemplateFormatVersion: '2010-09-09'
Description: "CloudFormation template to deploy multiple servers in aws"

Parameters:
  VpcBlock:
    Type: String
    Default: 192.168.0.0/16
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.

  Subnet01Block:
    Type: String
    Default: 192.168.0.0/18
    Description: CidrBlock for public subnet 01 within the VPC

  Subnet02Block:
    Type: String
    Default: 192.168.64.0/18
    Description: CidrBlock for public subnet 02 within the VPC

  Image:
    Description: "EC2 ami to be used"
    Type: "AWS::EC2::Image::Id"
  KeyPairName:
    Description: "SSH Key to asign to the EC2 instances"
    Type: "AWS::EC2::KeyPair::KeyName"
  InstanceType:
    Default: "t3.medium"
    Description: "The instance type to be used"
    Type: "String"
  EnvId:
    Description: "Environment ID tag to use"
    Type: "String"
  RootVolumeName:
    Description: "Device name of the root volume"
    Type: "String"
  RootVolumeType:
    Description: "Device type of the root volume"
    Type: "String"
  RootVolumeSize:
    Description: "Device size of the root volume"
    Type: "String"
  ServerDomain:
    Description: "Domain of the server"
    Type: "String"
  ServerName:
    Description: "Full name of the server"
    Type: "String"
  ServerName2:
    Description: "Full name of the server"
    Type: "String"
  AwsZone:
    Description: "AWS Availability Zone to deploy to"
    Type: "AWS::EC2::AvailabilityZone::Name"
  AwsZone2:
    Description: "AWS Availability Zone to deploy to"
    Type: "AWS::EC2::AvailabilityZone::Name"
  EBSkey:
    Description: "Key used to encrypt EBS volumes"
    Type: "String"

  
Resources:

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  Subnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 01
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '0'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet01Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet01"

  Subnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Subnet 02
    Properties:
      AvailabilityZone:
        Fn::Select:
          - '1'
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Ref: Subnet02Block
      VpcId:
        Ref: VPC
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-Subnet02"

  server1:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref InstanceType
      Tags:
        - Key: 'Name'
          Value: !Ref ServerName
        - Key: 'env_id'
          Value: !Ref EnvId
      AvailabilityZone: !Ref AwsZone 
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref AnsibleSecurityGroup
          SubnetId: !Ref Subnet01
      BlockDeviceMappings:
        - DeviceName: !Ref RootVolumeName
          Ebs:
            VolumeType: !Ref RootVolumeType 
            DeleteOnTermination: "true"
            VolumeSize: !Ref RootVolumeSize
            Encrypted: "true"
            KmsKeyId: !Ref EBSkey
  server2:
    Type: "AWS::EC2::Instance"
    Properties:
      ImageId: !Ref Image
      KeyName: !Ref KeyPairName
      InstanceType: !Ref InstanceType
      Tags:
        - Key: 'Name'
          Value: !Ref ServerName2
        - Key: 'env_id'
          Value: !Ref EnvId
      AvailabilityZone: !Ref AwsZone2
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet: 
            - !Ref AnsibleSecurityGroup
          SubnetId: !Ref Subnet02
      BlockDeviceMappings:
        - DeviceName: !Ref RootVolumeName
          Ebs:
            VolumeType: !Ref RootVolumeType 
            DeleteOnTermination: "true"
            VolumeSize: !Ref RootVolumeSize
            Encrypted: "true"
            KmsKeyId: !Ref EBSkey

  hostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      HostedZoneConfig:
        Comment: 'My hosted zone for example.com'
      Name: 'norahs-eac.com'
      VPCs:
        - VPCId:
            Ref: VPC
          VPCRegion: 'us-west-2'

  server1PrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZone
      Comment: Private DNS entry for server1
      Name: !Ref ServerName
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt server1.PrivateIp
  
  server2PrivateDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref hostedZone
      Comment: Private DNS entry for server2
      Name: !Ref ServerName2
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt server2.PrivateIp

  AnsibleSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ "", [ !Ref EnvId, "-ansible-sg"] ]
      GroupDescription: "Ansible demonstration SG - 22/SSH"
      VpcId: !Ref VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        Description: Permit SSH
        CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: "Name"
          Value: !Join [ "", [ !Ref EnvId, "-ansible-sg"] ]
        - Key: "env_id"
          Value: !Ref EnvId

        


  
